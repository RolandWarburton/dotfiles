# unmap stuff
map ,
map <c-d>
map <backspace>
map d

# set preview to false by default
set preview false

# automatically quit the when there are no clients left
set autoquit true

# set preview to false by default
set preview false

# set hidden to true (show hidden)
set hidden true

# use bash for commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# draw lines around the folders like in ranger
set drawbox true

# two column layout
set ratios 1:2

# draw vim like relative numbers
set relativenumber

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$fx";;
        *) for f in "$fx"; do xdg-open "$f"> /dev/null 2> /dev/null & done;;
    esac
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd | sed 's/\\/\\\\/g;s/"/\\"/g')
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}

cmd cd_and_quit &{{
  export LAST_LF_DIR="$PWD"
  # lf -remote "send :quit"
}}

cmd on-cd &{{
    export STARSHIP_SHELL=
    fmt="$(starship prompt)"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

cmd ripdrag-wrapper $ripdrag $(ripdrag-wrapper $fx)

cmd find_directory ${{
  if [ "$lf_hidden" ]; then
    lf -remote "send $id cd '$(fdfind --type d --exclude .git --exclude git --exclude .cargo --exclude node_modules --hidden | fzf)'"
    else 
    lf -remote "send $id cd '$(fdfind --type d --exclude .git --exclude git --exclude .cargo --exclude node_modules | fzf)'"
  fi
}}

cmd find_file ${{
  lf -remote "send $id select '$(fdfind --type f --exclude .git --exclude git --exclude .cargo --exclude node_modules --hidden | fzf)'"
}}


# vim quit
cmd q :quit
# open a file
map <enter> open
# run a shell command
map <c-s> :shell
# toggle hidden files
map <backspace> set hidden!
# toggle preview
map ,p set preview!
# fuzzy file search for file and directory names
map <c-p> :find_file
map <c-d> :find_directory
map <c-c> ${{wl-copy "$fx"}}
# activate ripgrep search of text within files
map ,g :fzf_search
# copy my quit key bind in vim
map ,q :quit
# ripdrag
map ,d ripdrag-wrapper
map ,c ${{pwd | tr -d '\n' | wl-copy}}
# folder shortcuts
map gh ${{  lf -remote "send $id cd /home/$USERNAME"}}
map gd ${{  lf -remote "send $id cd /home/$USERNAME/dotfiles"; lf -remote "send $id set hidden true"}}
map ,1 set ratios 1
map ,1 set ratios 1:2

# show the result of execution of previous commands
map ` !true

# git keys
map gb :git_branch
map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
