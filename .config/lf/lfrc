# unmap stuff
map ,
map <c-d>
map <c-n>
map <backspace>
map d
map f

################################################################################
# LAUNCH SCRIPTS
################################################################################
$~/.config/lf/sidecar.sh

################################################################################
# Settings
################################################################################
# set preview to false by default
set preview false

# automatically quit the when there are no clients left
set autoquit true

# set preview to false by default
set preview false

# set hidden to true (show hidden)
set hidden true

# use bash for commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# draw lines around the folders like in ranger
set drawbox true

# one column layout
set ratios 1

# two column layout
# set ratios 1:2

# draw vim like relative numbers
set relativenumber

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

################################################################################
# COMMANDS
################################################################################

cmd open ${{
  case $(file --mime-type "$f" -bL) in
    text/*|application/json)
        tmux-open-in-marked-pane "$fx"
        ;;
    *)
        for f in "$fx"; do
          xdg-open "$f" &
        done
        ;;
  esac
}}

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd | sed 's/\\/\\\\/g;s/"/\\"/g')
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}

cmd ripdrag-wrapper ${{ripdrag-wrapper $fx}}

cmd find_file ${{
  lf -remote "send $id select '$(fdfind --type f --exclude .git --exclude git --exclude .cargo --exclude node_modules --hidden | fzf)'"
}}

cmd filter_file %{{
    echo "Filter for: "
    read filter
    if [ -z "$filter" ]; then
      lf -remote "send setfilter"
    else
      lf -remote "send setfilter $filter"
    fi
}}

################################################################################
# COMMANDS
################################################################################
# vim quit
cmd q :quit

################################################################################
# KEYBINDS
################################################################################
# open a file
map <enter> open
# run a shell command
map <c-s> :shell
# toggle hidden files
map <backspace> set hidden!
# toggle preview
map ,p set preview!
# fuzzy file search for file and directory names
map <c-p> :find_file
map <c-d> ${{~/.config/lf/find-directory.lua --hidden}}
map <c-c> ${{pwd | tr -d '\n' | wl-copy}}
# activate ripgrep search of text within files
map ,g ${{~/.config/lf/grep.sh}}
# copy my quit key bind in vim
map ,q :quit
# ripdrag
map ,d ripdrag-wrapper
# folder shortcuts
map gh ${{  lf -remote "send $id cd /home/$USERNAME"}}
map gd ${{  lf -remote "send $id cd /home/$USERNAME/dotfiles"; lf -remote "send $id set hidden true"}}
# column layouts
map ,1 set ratios 1
map ,2 set ratios 1:2
# tmux intergrations
map <c-s> ${{~/.config/lf/cd-sync.sh}}
map <c-o> ${{~/.config/lf/split-to-nvim.sh}}
map <c-n> ${{~/.config/lf/new-file.lua}}
# file opening
map F :filter_file
# show the result of execution of previous commands
map ` !true
# git keys
map gb :git_branch
map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
