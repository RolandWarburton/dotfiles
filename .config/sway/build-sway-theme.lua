#!/usr/bin/lua5.1

local theme = require('theme-switcher')
local c = theme.get_colors()

local function get_script_current_directory()
  -- Get the full path of the current script
  local info = debug.getinfo(1, "S")
  local script_path = info.source:match("^@(.+)$")

  -- Extract the directory path from the full path
  if script_path then
    return script_path:match("^(.*[\\/])"), script_path
  else
    return nil, nil, "Unable to determine script directory"
  end
end

local script_dir, script_path, err = get_script_current_directory()
if err then
  os.exit(1, true)
end

local barThemeBase = [[
# DO NOT EDIT THIS FILE
# This file is generated by %s
# Please edit this file instead to change the bar configuration

bar {
  position top
  strip_workspace_numbers yes

  # When the status_command prints a new line to stdout, swaybar updates.
  # The default just shows the current date and time.
  # Find valid flags for the status bar here https://github.com/RolandWarburton/sway-bar-status-line
  status_command $HOME/.config/sway/statusBar

  # bar colors
  %s
}
]]

local barDarkTheme = [[
colors {
    focused_workspace %s %s %s
    background %s
    inactive_workspace %s %s %s
  }
]]

barDarkTheme = string.format(
  barDarkTheme,
  c.base1,
  c.accent1,
  c.accent3,
  c.base1,
  c.base1,
  c.base3,
  c.accent3
)

local barLightTheme = [[
colors {
    focused_workspace %s %s %s
    background %s
    inactive_workspace %s %s %s
  }
]]

barLightTheme = string.format(
  barLightTheme,
  c.base1,   -- active tab border
  c.base1,   -- active tab background
  c.accent2, -- active tab text
  c.base1,   -- bar background
  c.base1,
  c.base1,
  c.base2
)

local clientTheme = [[
# DO NOT EDIT THIS FILE
# This file is generated by %s
# Please edit this file instead to change the bar configuration

set $bg             %s
set $bg-inactive    %s
set $bg-urgent      %s
set $text-light     %s
set $text-dark      %s
set $text-inactive  %s

# set color theme
# class                 border        bground       text            indicator     child_border
client.focused          $bg           $bg           $text-dark      $bg           $bg
client.focused_inactive $bg-inactive  $bg-inactive  $text-inactive  $bg-inactive  $bg-inactive
client.unfocused        $bg-inactive  $bg-inactive  $text-inactive  $bg-inactive  $bg-inactive
client.urgent           $bg-urgent    $bg-urgent    $text-light     $bg-urgent    $bg-urgent
client.placeholder      $bg-inactive  $bg-inactive  $text-inactive  $bg-inactive  $bg-inactive
]]

local clientThemeLight = string.format(
  clientTheme,
  script_path,
  c.base2,
  c.base1,
  c.accent1,
  c.accent1,
  c.accent2,
  c.accent1
)

local clientThemeDark = string.format(
  clientTheme,
  script_path,
  c.accent1,
  c.base1,
  c.accent1,
  c.accent1,
  c.base2,
  c.base2
)

local theme_current = theme.get_theme_value()

-- the file structure looks something like this
-- .
-- ├── config
-- ├── modules
-- │   └── bar.conf <-- generated by sway-theme
-- ├── statusBar
-- └── sway-theme.lua
local make_bar_theme = function(base, light, dark)
  local file_path = script_dir .. "modules/bar.conf"
  local file = io.open(file_path, "w")

  if file then
    if theme_current == "light" then
      file:write(string.format(base, script_path, light))
    else
      file:write(string.format(base, script_path, dark))
    end
    print('written')
    file:close()
  else
    print("Failed to write to file: " .. file_path)
    os.exit(1)
  end
end

local make_client_theme = function(light, dark)
  local file_path = script_dir .. "modules/theme.conf"
  local file = io.open(file_path, "w")

  if file then
    if theme_current == "light" then
      file:write(light)
    else
      file:write(dark)
    end
    print('written')
    file:close()
  else
    print("Failed to write to file: " .. file_path)
    os.exit(1)
  end
end

make_bar_theme(barThemeBase, barLightTheme, barDarkTheme)
make_client_theme(clientThemeLight, clientThemeDark)
